name: CI/CD Pipeline

on:
  push:
    branches: [ main ]


jobs:

  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      # Step 1      
      - uses: actions/checkout@v2
      
      # Step 2
      - name: Set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: x64
      # Step 3
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv
      # Step 4
      - name:  Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/backend/lambda1/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      # Step 5
      - name: Activate and Install Depencies into Virtual env
        run: cd ./backend/lambda1 && python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
#        if: steps.cache-venv.outputs.cache-hit != 'true'
      # Step 6     
      - name: Activate venv and Run Test        
        run: cd ./backend/lambda1 && . venv/bin/activate && cd ./app && pytest
      
      # Step 7
      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./backend/lambda1/venv/lib/python3.7/site-packages
          zip -r9 ../../../../../../lambda1.zip .
      
      # Step 8
      - name: Add App to Zip file
        run: cd ./backend/lambda1/app && zip -g ../../../lambda1.zip -r .
      
      # Step 9
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda1
          path: lambda1.zip
  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      # Step 2
      - name: Download Lambda lambda1.zip
        uses: actions/download-artifact@v2
        with:
          name: lambda1
      # Step 3
      - name: Upload to S3
        run: aws s3 cp lambda1.zip s3://lambdadeploymenttest/lambda1.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      # Step 4
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name validate-test-lambda --s3-bucket lambdadeploymenttest --s3-key lambda1.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}